package com.iot.panel.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FORM_ONE".
*/
public class FormOneDao extends AbstractDao<FormOne, Long> {

    public static final String TABLENAME = "FORM_ONE";

    /**
     * Properties of entity FormOne.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Source = new Property(1, String.class, "source", false, "SOURCE");
        public final static Property Numero_de_compteur = new Property(2, String.class, "numero_de_compteur", false, "NUMERO_DE_COMPTEUR");
        public final static Property Calibre = new Property(3, String.class, "calibre", false, "CALIBRE");
        public final static Property Mode_de_pose = new Property(4, String.class, "mode_de_pose", false, "MODE_DE_POSE");
        public final static Property Dimension = new Property(5, String.class, "dimension", false, "DIMENSION");
        public final static Property Etat_de_lenvelope = new Property(6, String.class, "etat_de_lenvelope", false, "ETAT_DE_LENVELOPE");
        public final static Property Type_d_envelope = new Property(7, String.class, "type_d_envelope", false, "TYPE_D_ENVELOPE");
        public final static Property Ip = new Property(8, String.class, "ip", false, "IP");
        public final static Property Type_de_protection_generale = new Property(9, String.class, "type_de_protection_generale", false, "TYPE_DE_PROTECTION_GENERALE");
        public final static Property Etat_de_protection = new Property(10, String.class, "etat_de_protection", false, "ETAT_DE_PROTECTION");
        public final static Property Nombre_de_contacteur = new Property(11, String.class, "nombre_de_contacteur", false, "NOMBRE_DE_CONTACTEUR");
        public final static Property Etat_de_contacteur = new Property(12, String.class, "etat_de_contacteur", false, "ETAT_DE_CONTACTEUR");
        public final static Property Type_de_commande = new Property(13, String.class, "type_de_commande", false, "TYPE_DE_COMMANDE");
        public final static Property Nombre_de_depart = new Property(14, String.class, "nombre_de_depart", false, "NOMBRE_DE_DEPART");
        public final static Property Protection_de_depart = new Property(15, String.class, "protection_de_depart", false, "PROTECTION_DE_DEPART");
        public final static Property Tension = new Property(16, String.class, "tension", false, "TENSION");
    }


    public FormOneDao(DaoConfig config) {
        super(config);
    }
    
    public FormOneDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FORM_ONE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SOURCE\" TEXT," + // 1: source
                "\"NUMERO_DE_COMPTEUR\" TEXT," + // 2: numero_de_compteur
                "\"CALIBRE\" TEXT," + // 3: calibre
                "\"MODE_DE_POSE\" TEXT," + // 4: mode_de_pose
                "\"DIMENSION\" TEXT," + // 5: dimension
                "\"ETAT_DE_LENVELOPE\" TEXT," + // 6: etat_de_lenvelope
                "\"TYPE_D_ENVELOPE\" TEXT," + // 7: type_d_envelope
                "\"IP\" TEXT," + // 8: ip
                "\"TYPE_DE_PROTECTION_GENERALE\" TEXT," + // 9: type_de_protection_generale
                "\"ETAT_DE_PROTECTION\" TEXT," + // 10: etat_de_protection
                "\"NOMBRE_DE_CONTACTEUR\" TEXT," + // 11: nombre_de_contacteur
                "\"ETAT_DE_CONTACTEUR\" TEXT," + // 12: etat_de_contacteur
                "\"TYPE_DE_COMMANDE\" TEXT," + // 13: type_de_commande
                "\"NOMBRE_DE_DEPART\" TEXT," + // 14: nombre_de_depart
                "\"PROTECTION_DE_DEPART\" TEXT," + // 15: protection_de_depart
                "\"TENSION\" TEXT);"); // 16: tension
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FORM_ONE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FormOne entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(2, source);
        }
 
        String numero_de_compteur = entity.getNumero_de_compteur();
        if (numero_de_compteur != null) {
            stmt.bindString(3, numero_de_compteur);
        }
 
        String calibre = entity.getCalibre();
        if (calibre != null) {
            stmt.bindString(4, calibre);
        }
 
        String mode_de_pose = entity.getMode_de_pose();
        if (mode_de_pose != null) {
            stmt.bindString(5, mode_de_pose);
        }
 
        String dimension = entity.getDimension();
        if (dimension != null) {
            stmt.bindString(6, dimension);
        }
 
        String etat_de_lenvelope = entity.getEtat_de_lenvelope();
        if (etat_de_lenvelope != null) {
            stmt.bindString(7, etat_de_lenvelope);
        }
 
        String type_d_envelope = entity.getType_d_envelope();
        if (type_d_envelope != null) {
            stmt.bindString(8, type_d_envelope);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(9, ip);
        }
 
        String type_de_protection_generale = entity.getType_de_protection_generale();
        if (type_de_protection_generale != null) {
            stmt.bindString(10, type_de_protection_generale);
        }
 
        String etat_de_protection = entity.getEtat_de_protection();
        if (etat_de_protection != null) {
            stmt.bindString(11, etat_de_protection);
        }
 
        String nombre_de_contacteur = entity.getNombre_de_contacteur();
        if (nombre_de_contacteur != null) {
            stmt.bindString(12, nombre_de_contacteur);
        }
 
        String etat_de_contacteur = entity.getEtat_de_contacteur();
        if (etat_de_contacteur != null) {
            stmt.bindString(13, etat_de_contacteur);
        }
 
        String type_de_commande = entity.getType_de_commande();
        if (type_de_commande != null) {
            stmt.bindString(14, type_de_commande);
        }
 
        String nombre_de_depart = entity.getNombre_de_depart();
        if (nombre_de_depart != null) {
            stmt.bindString(15, nombre_de_depart);
        }
 
        String protection_de_depart = entity.getProtection_de_depart();
        if (protection_de_depart != null) {
            stmt.bindString(16, protection_de_depart);
        }
 
        String tension = entity.getTension();
        if (tension != null) {
            stmt.bindString(17, tension);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FormOne entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(2, source);
        }
 
        String numero_de_compteur = entity.getNumero_de_compteur();
        if (numero_de_compteur != null) {
            stmt.bindString(3, numero_de_compteur);
        }
 
        String calibre = entity.getCalibre();
        if (calibre != null) {
            stmt.bindString(4, calibre);
        }
 
        String mode_de_pose = entity.getMode_de_pose();
        if (mode_de_pose != null) {
            stmt.bindString(5, mode_de_pose);
        }
 
        String dimension = entity.getDimension();
        if (dimension != null) {
            stmt.bindString(6, dimension);
        }
 
        String etat_de_lenvelope = entity.getEtat_de_lenvelope();
        if (etat_de_lenvelope != null) {
            stmt.bindString(7, etat_de_lenvelope);
        }
 
        String type_d_envelope = entity.getType_d_envelope();
        if (type_d_envelope != null) {
            stmt.bindString(8, type_d_envelope);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(9, ip);
        }
 
        String type_de_protection_generale = entity.getType_de_protection_generale();
        if (type_de_protection_generale != null) {
            stmt.bindString(10, type_de_protection_generale);
        }
 
        String etat_de_protection = entity.getEtat_de_protection();
        if (etat_de_protection != null) {
            stmt.bindString(11, etat_de_protection);
        }
 
        String nombre_de_contacteur = entity.getNombre_de_contacteur();
        if (nombre_de_contacteur != null) {
            stmt.bindString(12, nombre_de_contacteur);
        }
 
        String etat_de_contacteur = entity.getEtat_de_contacteur();
        if (etat_de_contacteur != null) {
            stmt.bindString(13, etat_de_contacteur);
        }
 
        String type_de_commande = entity.getType_de_commande();
        if (type_de_commande != null) {
            stmt.bindString(14, type_de_commande);
        }
 
        String nombre_de_depart = entity.getNombre_de_depart();
        if (nombre_de_depart != null) {
            stmt.bindString(15, nombre_de_depart);
        }
 
        String protection_de_depart = entity.getProtection_de_depart();
        if (protection_de_depart != null) {
            stmt.bindString(16, protection_de_depart);
        }
 
        String tension = entity.getTension();
        if (tension != null) {
            stmt.bindString(17, tension);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FormOne readEntity(Cursor cursor, int offset) {
        FormOne entity = new FormOne( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // source
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // numero_de_compteur
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // calibre
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mode_de_pose
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dimension
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // etat_de_lenvelope
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // type_d_envelope
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ip
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // type_de_protection_generale
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // etat_de_protection
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // nombre_de_contacteur
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // etat_de_contacteur
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // type_de_commande
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // nombre_de_depart
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // protection_de_depart
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // tension
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FormOne entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSource(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNumero_de_compteur(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCalibre(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMode_de_pose(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDimension(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEtat_de_lenvelope(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setType_d_envelope(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIp(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setType_de_protection_generale(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEtat_de_protection(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setNombre_de_contacteur(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEtat_de_contacteur(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setType_de_commande(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setNombre_de_depart(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setProtection_de_depart(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTension(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FormOne entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FormOne entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FormOne entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
